{"ast":null,"code":"import { db, storage } from \"../firebaseConfig\";\nimport { collection, addDoc, getDocs } from \"firebase/firestore\";\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\n\n/** ðŸ”¹ Function to Upload Music File & Save Metadata */\nexport const uploadMusic = async (file, trackName, albumName, imageFile) => {\n  try {\n    // Upload music file to Firebase Storage\n    const musicRef = ref(storage, `music/${file.name}`);\n    await uploadBytes(musicRef, file);\n    const fileUrl = await getDownloadURL(musicRef);\n\n    // Upload cover image if provided\n    let imageUrl = \"\";\n    if (imageFile) {\n      const imageRef = ref(storage, `music/covers/${imageFile.name}`);\n      await uploadBytes(imageRef, imageFile);\n      imageUrl = await getDownloadURL(imageRef);\n    }\n\n    // Store track metadata in Firestore\n    const docRef = await addDoc(collection(db, \"music\"), {\n      name: trackName,\n      album: albumName,\n      url: fileUrl,\n      coverImage: imageUrl || \"\",\n      createdAt: new Date()\n    });\n    return {\n      success: true,\n      id: docRef.id\n    };\n  } catch (error) {\n    console.error(\"Error uploading music:\", error);\n    return {\n      success: false,\n      error\n    };\n  }\n};\n\n/** ðŸ”¹ Function to Fetch All Music Data from Firestore */\nexport const fetchMusic = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, \"music\"));\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error(\"Error fetching music:\", error);\n    return [];\n  }\n};\n\n/** ðŸ”¹ Function to Upload Image & Save Metadata */\nexport const uploadGalleryImage = async (file, albumName) => {\n  try {\n    // Upload image to Firebase Storage\n    const imageRef = ref(storage, `gallery/${albumName}/${file.name}`);\n    await uploadBytes(imageRef, file);\n    const fileUrl = await getDownloadURL(imageRef);\n\n    // Store image metadata in Firestore\n    await addDoc(collection(db, \"gallery\"), {\n      album: albumName,\n      imageUrl: fileUrl,\n      createdAt: new Date()\n    });\n    return {\n      success: true,\n      url: fileUrl\n    };\n  } catch (error) {\n    console.error(\"Error uploading image:\", error);\n    return {\n      success: false,\n      error\n    };\n  }\n};\n\n/** ðŸ”¹ Function to Fetch All Gallery Images */\nexport const fetchGallery = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, \"gallery\"));\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error(\"Error fetching gallery images:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["db","storage","collection","addDoc","getDocs","ref","uploadBytes","getDownloadURL","uploadMusic","file","trackName","albumName","imageFile","musicRef","name","fileUrl","imageUrl","imageRef","docRef","album","url","coverImage","createdAt","Date","success","id","error","console","fetchMusic","querySnapshot","docs","map","doc","data","uploadGalleryImage","fetchGallery"],"sources":["C:/Users/sagar/OneDrive/Documents/host/menm/ragnar/src/services/firestoreService.js"],"sourcesContent":["import { db, storage } from \"../firebaseConfig\";\r\nimport { collection, addDoc, getDocs } from \"firebase/firestore\";\r\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\n\r\n/** ðŸ”¹ Function to Upload Music File & Save Metadata */\r\nexport const uploadMusic = async (file, trackName, albumName, imageFile) => {\r\n  try {\r\n    // Upload music file to Firebase Storage\r\n    const musicRef = ref(storage, `music/${file.name}`);\r\n    await uploadBytes(musicRef, file);\r\n    const fileUrl = await getDownloadURL(musicRef);\r\n\r\n    // Upload cover image if provided\r\n    let imageUrl = \"\";\r\n    if (imageFile) {\r\n      const imageRef = ref(storage, `music/covers/${imageFile.name}`);\r\n      await uploadBytes(imageRef, imageFile);\r\n      imageUrl = await getDownloadURL(imageRef);\r\n    }\r\n\r\n    // Store track metadata in Firestore\r\n    const docRef = await addDoc(collection(db, \"music\"), {\r\n      name: trackName,\r\n      album: albumName,\r\n      url: fileUrl,\r\n      coverImage: imageUrl || \"\",\r\n      createdAt: new Date(),\r\n    });\r\n\r\n    return { success: true, id: docRef.id };\r\n  } catch (error) {\r\n    console.error(\"Error uploading music:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\n/** ðŸ”¹ Function to Fetch All Music Data from Firestore */\r\nexport const fetchMusic = async () => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, \"music\"));\r\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\r\n  } catch (error) {\r\n    console.error(\"Error fetching music:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/** ðŸ”¹ Function to Upload Image & Save Metadata */\r\nexport const uploadGalleryImage = async (file, albumName) => {\r\n  try {\r\n    // Upload image to Firebase Storage\r\n    const imageRef = ref(storage, `gallery/${albumName}/${file.name}`);\r\n    await uploadBytes(imageRef, file);\r\n    const fileUrl = await getDownloadURL(imageRef);\r\n\r\n    // Store image metadata in Firestore\r\n    await addDoc(collection(db, \"gallery\"), {\r\n      album: albumName,\r\n      imageUrl: fileUrl,\r\n      createdAt: new Date(),\r\n    });\r\n\r\n    return { success: true, url: fileUrl };\r\n  } catch (error) {\r\n    console.error(\"Error uploading image:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n\r\n/** ðŸ”¹ Function to Fetch All Gallery Images */\r\nexport const fetchGallery = async () => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, \"gallery\"));\r\n    return querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\r\n  } catch (error) {\r\n    console.error(\"Error fetching gallery images:\", error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}